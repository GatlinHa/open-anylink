services:
  # 注册中心 & 配置中心
  nacos:
    image: nacos/nacos-server:v2.5.1
    container_name: anylink-nacos  # 为容器指定名称
    environment:
      MODE: standalone
    ports:
      - "8848:8848"
    networks:
      micro-net:
        ipv4_address: 172.18.1.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8848/nacos/"]
      interval: 5s
      timeout: 3s
      retries: 10

  # Nacos初始化配置
  nacos-init:
    image: curlimages/curl:8.12.1
    container_name: anylink-nacos-init  # 为容器指定名称
    networks:
      micro-net:
    depends_on:
      nacos:
        condition: service_healthy
    volumes:
      - ./docker-config/nacos:/config
    entrypoint:  # 显式定义入口点
      - /bin/sh
      - -c
    command:
      - |
        curl -X POST "http://nacos:8848/nacos/v2/console/namespace" \
          -d "namespaceId=dev20250303001" \
          -d "namespaceName=dev" \
          -d "namespaceDesc=Development Environment";
        
        for file in /config/*.yaml; do
          dataId=$$(basename "$$file")
          curl -X POST "http://nacos:8848/nacos/v2/cs/config" \
            -F "dataId=$$dataId" \
            -F "group=DEFAULT_GROUP" \
            -F "namespaceId=dev20250303001" \
            -F "type=yaml" \
            -F "content=$$(cat "$$file")"
        done

  redis:
    image: redis:alpine
    container_name: anylink-redis  # 为容器指定名称
    ports:
      - "6379:6379"
    networks:
      micro-net:
        ipv4_address: 172.18.1.2
    volumes:
      - redis_data:/data

  mysql:
    image: mysql:8.0.41-debian
    container_name: anylink-mysql  # 为容器指定名称
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      TZ: Asia/Shanghai  # 指定时区
    ports:
      - "3306:3306"
    networks:
      micro-net:
        ipv4_address: 172.18.1.3
    volumes:
      - mysql_data:/var/lib/mysql
      - ./anylink-user/src/main/resources/db/mysql.sql:/docker-entrypoint-initdb.d/1_user.sql
      - ./anylink-chat/src/main/resources/db/mysql.sql:/docker-entrypoint-initdb.d/2_chat.sql
      - ./anylink-groupmng/src/main/resources/db/mysql.sql:/docker-entrypoint-initdb.d/3_groupmng.sql
      - ./anylink-mts/src/main/resources/db/mysql.sql:/docker-entrypoint-initdb.d/4_mts.sql
      - ./docker-config/mysql/demo-data.sql:/docker-entrypoint-initdb.d/5_demo-data.sql
    command:
      - mysqld
      - --default-time-zone=+8:00  # 设置 MySQL 服务时区

  mongo:
    image: mongo:8.0.5
    container_name: anylink-mongodb  # 为容器指定名称
    ports:
      - "27017:27017"
    networks:
      micro-net:
        ipv4_address: 172.18.1.4
    volumes:
      - mongo_data:/data/db

  minio:
    image: minio/minio:RELEASE.2025-02-28T09-55-16Z
    container_name: anylink-minio  # 为容器指定名称
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: 12345678
    networks:
      micro-net:
        ipv4_address: 172.18.1.5
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"  # 简化启动命令
    healthcheck:  # 添加健康检查
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 10

  minio-init:
    image: minio/minio:RELEASE.2025-02-28T09-55-16Z
    container_name: anylink-minio-init  # 为容器指定名称
    networks:
      micro-net:
    depends_on:
      minio:
        condition: service_healthy
    entrypoint:  # 显式定义入口点
      - /bin/sh
      - -c
    command:
      - |
        # 等待 MinIO 完全就绪
        until curl -sf http://minio:9000/minio/health/live; do
          echo "Waiting for MinIO cluster..."
          sleep 5
        done
        
        # 安装 MinIO 客户端
        if ! command -v mc &> /dev/null; then
          wget https://dl.min.io/client/mc/release/linux-amd64/mc -O /usr/bin/mc
          chmod +x /usr/bin/mc
        fi
        
        # 配置别名（使用容器内地址）
        mc alias set local http://minio:9000 admin 12345678 --api S3v4
        
        # 尝试列出存储桶，如果不存在会返回非零状态码
        if ! mc ls local/anylink > /dev/null 2>&1; then
          # 存储桶不存在，进行创建
          mc mb local/anylink
          echo "bucket anylink created!"
        fi
        
        # 设置存储桶的访问策略为 public
        mc anonymous set public local/anylink
        echo "Bucket initialization completed!"

  kafka:
    image: bitnami/kafka:3.9.0
    container_name: anylink-kafka  # 为容器指定名称
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_BROKER_ID: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    networks:
      micro-net:
        ipv4_address: 172.18.1.6
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 5s
      timeout: 3s
      retries: 10

  # Kafka 初始化服务
  kafka-init:
    image: bitnami/kafka:3.9.0  # 复用相同镜像
    container_name: anylink-kafka-init
    networks:
      micro-net:
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint:  # 显式定义入口点
      - /bin/sh
      - -c
    command:
      - |
        # 等待 Kafka 完全就绪（比健康检查更严格）
        until kafka-topics.sh --list --bootstrap-server kafka:9092; do
          echo "Waiting for Kafka cluster..."
          sleep 5
        done
        
        # 创建topic
        kafka-topics.sh --create --topic topic-netty-0 --bootstrap-server kafka:9092 --if-not-exists
        kafka-topics.sh --create --topic topic-netty-1 --bootstrap-server kafka:9092 --if-not-exists
        kafka-topics.sh --create --topic topic-netty-2 --bootstrap-server kafka:9092 --if-not-exists
        kafka-topics.sh --create --topic topic-netty-3 --bootstrap-server kafka:9092 --if-not-exists

  zookeeper:
    image: bitnami/zookeeper:3.9.3
    container_name: anylink-zookeeper  # 为容器指定名称
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      micro-net:
        ipv4_address: 172.18.1.7
    volumes:
      - zookeeper_data:/bitnami

  # 微服务实例
  anylink-agw:
    image: anylink-agw  # 指定镜像名称
    container_name: anylink-agw  # 为容器指定名称
    build:
      context: ./anylink-agw
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CLOUD_NACOS_CONFIG_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_DISCOVERY_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_CONFIG_SERVER-ADDR: "nacos:8848"
      SPRING_CLOUD_NACOS_DISCOVERY_SERVER-ADDR: "nacos:8848"
    ports:
      - "8080:8080"
    networks:
      micro-net:
        ipv4_address: 172.18.101.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/anylink-agw/healthcheck"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - nacos-init
      - redis

  anylink-chat:
    image: anylink-chat  # 指定镜像名称
    container_name: anylink-chat  # 为容器指定名称
    build:
      context: ./anylink-chat
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CLOUD_NACOS_CONFIG_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_DISCOVERY_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_CONFIG_SERVER-ADDR: "nacos:8848"
      SPRING_CLOUD_NACOS_DISCOVERY_SERVER-ADDR: "nacos:8848"
    networks:
      micro-net:
        ipv4_address: 172.18.102.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/api/anylink-chat/healthcheck"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - nacos-init
      - redis
      - mysql
      - mongo

  anylink-groupmng:
    image: anylink-groupmng  # 指定镜像名称
    container_name: anylink-groupmng  # 为容器指定名称
    build:
      context: ./anylink-groupmng
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CLOUD_NACOS_CONFIG_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_DISCOVERY_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_CONFIG_SERVER-ADDR: "nacos:8848"
      SPRING_CLOUD_NACOS_DISCOVERY_SERVER-ADDR: "nacos:8848"
    networks:
      micro-net:
        ipv4_address: 172.18.103.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/api/anylink-groupmng/healthcheck"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - nacos-init
      - redis
      - mysql


  anylink-mts:
    image: anylink-mts  # 指定镜像名称
    container_name: anylink-mts  # 为容器指定名称
    build:
      context: ./anylink-mts
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CLOUD_NACOS_CONFIG_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_DISCOVERY_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_CONFIG_SERVER-ADDR: "nacos:8848"
      SPRING_CLOUD_NACOS_DISCOVERY_SERVER-ADDR: "nacos:8848"
    networks:
      micro-net:
        ipv4_address: 172.18.104.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8040/api/anylink-mts/healthcheck"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - nacos-init
      - redis
      - mysql
      - minio-init


  anylink-netty-1:
    image: anylink-netty  # 指定镜像名称
    container_name: anylink-netty-1  # 为容器指定名称
    build:
      context: ./anylink-netty
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CLOUD_NACOS_CONFIG_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_DISCOVERY_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_CONFIG_SERVER-ADDR: "nacos:8848"
      SPRING_CLOUD_NACOS_DISCOVERY_SERVER-ADDR: "nacos:8848"
    networks:
      micro-net:
        ipv4_address: 172.18.105.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/anylink-netty/healthcheck"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - nacos-init
      - redis
      - kafka-init

  anylink-netty-2:
    image: anylink-netty  # 指定镜像名称
    container_name: anylink-netty-2  # 为容器指定名称
    build:
      context: ./anylink-netty
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CLOUD_NACOS_CONFIG_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_DISCOVERY_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_CONFIG_SERVER-ADDR: "nacos:8848"
      SPRING_CLOUD_NACOS_DISCOVERY_SERVER-ADDR: "nacos:8848"
    networks:
      micro-net:
        ipv4_address: 172.18.105.2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/anylink-netty/healthcheck"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - nacos-init
      - redis
      - kafka-init

  anylink-user:
    image: anylink-user  # 指定镜像名称
    container_name: anylink-user  # 为容器指定名称
    build:
      context: ./anylink-user
      dockerfile: ./Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CLOUD_NACOS_CONFIG_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_DISCOVERY_NAMESPACE: "dev20250303001"
      SPRING_CLOUD_NACOS_CONFIG_SERVER-ADDR: "nacos:8848"
      SPRING_CLOUD_NACOS_DISCOVERY_SERVER-ADDR: "nacos:8848"
    networks:
      micro-net:
        ipv4_address: 172.18.106.1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/api/anylink-user/healthcheck"]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      - nacos-init
      - redis
      - mysql

  # 新增的检查服务
  check-all-service:
    image: curlimages/curl:8.12.1
    container_name: check-all-service
    networks:
      micro-net:
    depends_on:
      anylink-agw:
        condition: service_healthy
      anylink-chat:
        condition: service_healthy
      anylink-groupmng:
        condition: service_healthy
      anylink-mts:
        condition: service_healthy
      anylink-netty-1:
        condition: service_healthy
      anylink-netty-2:
        condition: service_healthy
      anylink-user:
        condition: service_healthy
    entrypoint: /bin/sh
    command: -c "echo '*********Congratulations! All services are up and healthy!*********'"

volumes:
  mysql_data:
  redis_data:
  mongo_data:
  minio_data:
  zookeeper_data:
  kafka_data:

networks:
  micro-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16